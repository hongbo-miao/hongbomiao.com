# https://docs.docker.com/compose/compose-file/compose-versioning
version: "3.8"

services:
  # API
  api-node:
    container_name: hm_api_node
    build:
      context: .
      dockerfile: api-node/Dockerfile.development
    env_file:
      - api-node/.env.development.local.example.docker
    volumes:
      - ./api-node:/usr/src/app/api-node
      - /usr/src/app/api-node/node_modules
    restart: unless-stopped
    ports:
      - "5000:5000"
    depends_on:
      - redis
      - postgres

  # Redis
  redis:
    container_name: hm_redis
    image: redis:6.2.6-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    ports:
      - "6379:6379"

  # PostgreSQL
  postgres:
    container_name: hm_postgres
    image: postgres:14.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init_up.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - ./docker/postgres/.env.development.local.example
    restart: unless-stopped
    ports:
      - "5432:5432"

  # OpenTelemetry Collector
  opentelemetry-collector:
    container_name: hm_opentelemetry_collector
    image: otel/opentelemetry-collector:0.38.0
    command: [
      "--config=/conf/otel-collector-config.yaml",
      "--log-level=DEBUG"
    ]
    volumes:
      - ./docker/opentelemetry-collector/otel-collector-config.yaml:/conf/otel-collector-config.yaml
    restart: unless-stopped
    ports:
      - "9464:9464"
      - "55680:55680"
      - "55681:55681"
    depends_on:
      - jaeger-collector

  # Jaeger
  jaeger-collector:
    container_name: hm_jaeger_collector
    image: jaegertracing/jaeger-opentelemetry-collector:latest
    command: [
      "--es.num-shards=1",
      "--es.num-replicas=0",
      "--es.server-urls=http://elasticsearch:9200"
    ]
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - LOG_LEVEL=debug
    restart: unless-stopped
    ports:
      - "14250"
      - "14268"
    depends_on:
      - elasticsearch

  jaeger-agent:
    container_name: hm_jaeger_agent
    image: jaegertracing/jaeger-opentelemetry-agent:latest
    command: [
      "--config=/etc/otel-agent-config.yaml",
      "--reporter.grpc.host-port=jaeger-collector:14250"
    ]
    volumes:
      - ./docker/jaeger-agent/otel-agent-config.yaml:/etc/otel-agent-config.yaml
    ports:
      - "6831/udp"
      - "6832/udp"
      - "5778"
    restart: unless-stopped
    depends_on:
      - jaeger-collector

  jaeger-query:
    container_name: hm_jaeger_query
    image: jaegertracing/jaeger-query:latest
    command: [
      "--es.num-shards=1",
      "--es.num-replicas=0",
      "--es.server-urls=http://elasticsearch:9200"
    ]
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - LOG_LEVEL=debug
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "16687"
    depends_on:
      - elasticsearch

  # Kibana
  kibana:
    container_name: hm_kibana
    # https://www.docker.elastic.co/r/kibana/kibana-oss
    image: docker.elastic.co/kibana/kibana-oss:7.10.2
    restart: unless-stopped
    ports:
      - "5601:5601"

  # Node Exporter
  node:
    container_name: hm_node_exporter
    image: prom/node-exporter:v1.2.2
    restart: unless-stopped
    ports:
      - "9100:9100"

  # Prometheus
  prometheus:
    container_name: hm_prometheus
    image: prom/prometheus:v2.30.3
    volumes:
      - ./docker/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"

  # Grafana
  grafana:
    container_name: hm_grafana
    image: grafana/grafana:8.2.2
    environment:
      # https://grafana.com/grafana/plugins
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

# For persistence between restarts
volumes:
  redis_data: { }
  postgres_data: { }
  prometheus_data: { }
