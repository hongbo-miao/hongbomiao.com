---
name: . Test Machine Learning

'on':
  workflow_call:
    inputs:
      amazon-sagemaker-triton-resnet-50-deploy:
        required: true
        type: boolean
      amazon-sagemaker-triton-resnet-50-infer:
        required: true
        type: boolean
      convolutional-neural-network:
        required: true
        type: boolean
      feature-store:
        required: true
        type: boolean
      graph-neural-network:
        required: true
        type: boolean
      hm-autogluon:
        required: true
        type: boolean
      hm-cuml:
        required: true
        type: boolean
      hm-docling:
        required: true
        type: boolean
      hm-faster-whisper:
        required: true
        type: boolean
      hm-flax:
        required: true
        type: boolean
      hm-gradio-classify-image:
        required: true
        type: boolean
      hm-kubeflow-calculate:
        required: true
        type: boolean
      hm-kubeflow-classify-mnist:
        required: true
        type: boolean
      hm-langchain-chat-pdf:
        required: true
        type: boolean
      hm-langgraph-chat-pdf:
        required: true
        type: boolean
      hm-llama-index-chat-pdf:
        required: true
        type: boolean
      hm-mlflow-classify-mnist:
        required: true
        type: boolean
      hm-mlflow-predict-diabetes:
        required: true
        type: boolean
      hm-nvidia-modulus:
        required: true
        type: boolean
      hm-rasa:
        required: true
        type: boolean
      hm-scikit-learn:
        required: true
        type: boolean
      hm-sglang:
        required: true
        type: boolean
      hm-streamlit-live-line-chart:
        required: true
        type: boolean
      hm-streamlit-map:
        required: true
        type: boolean
      hugging-face-analyze-sentiment:
        required: true
        type: boolean
      mineru:
        required: true
        type: boolean
      neural-forecasting-forecast-air-passenger-number:
        required: true
        type: boolean
      nvidia-dali:
        required: true
        type: boolean
      reinforcement-learning-cart-pole:
        required: true
        type: boolean
      stable-diffusion:
        required: true
        type: boolean

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    permissions:
      pull-requests: read
    outputs:
      workflow: ${{ steps.filter.outputs.workflow }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - uses: dorny/paths-filter@v3.0.2
        id: filter
        with:
          filters: |
            workflow:
              - '.github/workflows/.test-machine-learning.yml'

  amazon-sagemaker-triton-resnet-50-deploy-test:
    name: Amazon SageMaker Triton ResNet 50 (Deploy) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.amazon-sagemaker-triton-resnet-50-deploy }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/deploy/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/deploy/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/deploy
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/deploy
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/deploy

  amazon-sagemaker-triton-resnet-50-infer-test:
    name: Amazon SageMaker Triton ResNet 50 (Infer) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.amazon-sagemaker-triton-resnet-50-infer }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/infer/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/infer/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/infer
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/infer
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/infer

  scikit-learn-test:
    name: scikit-learn | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-scikit-learn }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-scikit-learn/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-scikit-learn/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-scikit-learn
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-scikit-learn
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-scikit-learn

  cuml-test:
    name: cuML | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-cuml }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-cuml/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-cuml/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-cuml
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-cuml
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-cuml

  hugging-face-analyze-sentiment-test:
    name: Hugging Face (analyze-sentiment) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hugging-face-analyze-sentiment }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hugging-face/analyze-sentiment/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hugging-face/analyze-sentiment/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hugging-face/analyze-sentiment
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hugging-face/analyze-sentiment
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hugging-face/analyze-sentiment

  gradio-classify-image-test:
    name: Gradio (classify-image) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-gradio-classify-image }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-gradio/applications/classify-image/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-gradio/applications/classify-image/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-gradio/applications/classify-image
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-gradio/applications/classify-image
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-gradio/applications/classify-image

  streamlit-live-line-chart-test:
    name: Streamlit (live-line-chart) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-streamlit-live-line-chart }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-streamlit/applications/live-line-chart/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-streamlit/applications/live-line-chart/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-streamlit/applications/live-line-chart
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-streamlit/applications/live-line-chart
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-streamlit/applications/live-line-chart

  streamlit-map-test:
    name: Streamlit (map) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-streamlit-map }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-streamlit/applications/map/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-streamlit/applications/map/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-streamlit/applications/map
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-streamlit/applications/map
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-streamlit/applications/map

  flax-test:
    name: Flax | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-flax }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-flax/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-flax/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-flax
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-flax
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-flax

  autogluon-test:
    name: AutoGluon | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-autogluon }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-autogluon/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-autogluon/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-autogluon
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-autogluon
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-autogluon

  nvidia-dali-test:
    name: NVIDIA DALI | Test
    needs: detect-changes
    if: ${{ false }}
    # if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.nvidia-dali }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/nvidia-dali/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/nvidia-dali/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/nvidia-dali
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/nvidia-dali
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/nvidia-dali

  modulus-test:
    name: NVIDIA Modulus | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-nvidia-modulus }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-nvidia-modulus/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-nvidia-modulus/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-nvidia-modulus
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-nvidia-modulus
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-nvidia-modulus

  feature-store-test:
    name: Feature Store | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.feature-store }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/feature-store/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/feature-store/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/feature-store
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/feature-store
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/feature-store

  sglang-test:
    name: SGLang | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-sglang }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-sglang/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-sglang/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-sglang
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-sglang
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-sglang

  kubeflow-calculate-test:
    name: Kubeflow (calculate) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-kubeflow-calculate }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-kubeflow/pipelines/calculate/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-kubeflow/pipelines/calculate/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-kubeflow/pipelines/calculate
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-kubeflow/pipelines/calculate
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-kubeflow/pipelines/calculate

  kubeflow-classify-mnist-test:
    name: Kubeflow (classify-mnist) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-kubeflow-classify-mnist }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-kubeflow/pipelines/classify-mnist/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-kubeflow/pipelines/classify-mnist/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-kubeflow/pipelines/classify-mnist
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-kubeflow/pipelines/classify-mnist
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-kubeflow/pipelines/classify-mnist

  mineru-test:
    name: MinerU | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.mineru }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/mineru/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/mineru/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/mineru
        run: |
          uv sync --extra=build
          uv sync --extra=build --extra=compile
          uv sync --extra=build --extra=compile --dev
      - name: Test
        working-directory: machine-learning/mineru
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/mineru

  docling-test:
    name: Docling | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-docling }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-docling/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-docling/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-docling
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-docling
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-docling

  langchain-chat-pdf-test:
    name: LangChain (chat-pdf) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-langchain-chat-pdf }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-langchain/applications/chat-pdf/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-langchain/applications/chat-pdf/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-langchain/applications/chat-pdf
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-langchain/applications/chat-pdf
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-langchain/applications/chat-pdf

  langgraph-chat-pdf-test:
    name: LangGraph (chat-pdf) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-langgraph-chat-pdf }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-langgraph/applications/chat-pdf/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-langgraph/applications/chat-pdf/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-langgraph/applications/chat-pdf
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-langgraph/applications/chat-pdf
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-langgraph/applications/chat-pdf

  llama-index-chat-pdf-test:
    name: LlamaIndex (chat-pdf) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-llama-index-chat-pdf }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-llama-index/applications/chat-pdf/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-llama-index/applications/chat-pdf/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-llama-index/applications/chat-pdf
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-llama-index/applications/chat-pdf
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-llama-index/applications/chat-pdf

  mlflow-classify-mnist-test:
    name: MLflow (classify-mnist) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-mlflow-classify-mnist }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-mlflow/experiments/classify-mnist/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-mlflow/experiments/classify-mnist/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-mlflow/experiments/classify-mnist
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-mlflow/experiments/classify-mnist
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-mlflow/experiments/classify-mnist

  mlflow-predict-diabetes-test:
    name: MLflow (predict-diabetes) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-mlflow-predict-diabetes }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-mlflow/experiments/predict-diabetes/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-mlflow/experiments/predict-diabetes/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-mlflow/experiments/predict-diabetes
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-mlflow/experiments/predict-diabetes
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-mlflow/experiments/predict-diabetes

  neural-forecasting-forecast-air-passenger-number-test:
    name: Neural Forecasting (forecast-air-passenger-number) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.neural-forecasting-forecast-air-passenger-number }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/neural-forecasting/forecast-air-passenger-number/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/neural-forecasting/forecast-air-passenger-number/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/neural-forecasting/forecast-air-passenger-number
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/neural-forecasting/forecast-air-passenger-number
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/neural-forecasting/forecast-air-passenger-number

  reinforcement-learning-cart-pole-test:
    name: Reinforcement Learning (cart-pole) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.reinforcement-learning-cart-pole }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/reinforcement-learning/cart-pole/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/reinforcement-learning/cart-pole/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/reinforcement-learning/cart-pole
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/reinforcement-learning/cart-pole
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/reinforcement-learning/cart-pole

  faster-whisper-test:
    name: Faster Whisper | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-faster-whisper }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/hm-faster-whisper/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/hm-faster-whisper/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/hm-faster-whisper
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/hm-faster-whisper
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/hm-faster-whisper

  stable-diffusion-test:
    name: Stable Diffusion | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.stable-diffusion }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/stable-diffusion/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/stable-diffusion/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/stable-diffusion
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/stable-diffusion
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/stable-diffusion

  rasa-test:
    name: Rasa | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.hm-rasa }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Train and test
        uses: RasaHQ/rasa-train-test-gha@v2.3.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workspace: ${{ github.workspace }}/machine-learning/hm-rasa

  graph-neural-network-test:
    name: GNN | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.graph-neural-network }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/graph-neural-network/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/graph-neural-network/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/graph-neural-network
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/graph-neural-network
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/graph-neural-network

  graph-neural-network-train:
    name: GNN | Train
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.graph-neural-network }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up CML
        uses: iterative/setup-cml@v2.0.1
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/graph-neural-network/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/graph-neural-network/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/graph-neural-network
        run: |
          uv sync --dev
      - name: Train model
        working-directory: machine-learning/graph-neural-network
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          uv run poe dev --dataset=ogbg-molhiv --gnn=gcn --feature=simple --epochs=2

  convolutional-neural-network-test:
    name: CNN | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.convolutional-neural-network }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/convolutional-neural-network/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/convolutional-neural-network/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/convolutional-neural-network
        run: |
          uv sync --dev
      - name: Test
        working-directory: machine-learning/convolutional-neural-network
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.0
        with:
          directory: machine-learning/convolutional-neural-network

  convolutional-neural-network-cml-local-train:
    name: CNN | CML (Local) - Train
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || inputs.convolutional-neural-network }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up CML
        uses: iterative/setup-cml@v2.0.1
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/convolutional-neural-network/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/convolutional-neural-network/pyproject.toml
      - name: Install dependencies
        working-directory: machine-learning/convolutional-neural-network
        run: |
          uv sync --dev
      - name: Train model
        working-directory: machine-learning/convolutional-neural-network
        shell: bash -l {0}
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          uv run poe dev --should_download_original_data=True
      - name: Write CML report
        working-directory: machine-learning/convolutional-neural-network
        shell: bash -l {0}
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "# CML (Local) Report" >> report.md
          echo "## Params" >> report.md
          cat output/reports/params.txt >> report.md
          cml comment create report.md

  convolutional-neural-network-cml-cloud-set-up:
    name: CNN | CML (Cloud) - Set Up
    runs-on: ubuntu-24.04
    environment: test
    needs: detect-changes
    if: ${{ false }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up CML
        uses: iterative/setup-cml@v2.0.1
      - name: Set up cloud
        shell: bash
        env:
          REPO_TOKEN: ${{ secrets.CML_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cml-runner \
          --cloud=aws \
          --cloud-region=us-west-2 \
          --cloud-type=t2.small \
          --labels=cml-runner

  convolutional-neural-network-cml-cloud-train:
    name: CNN | CML (Cloud) - Train
    needs: convolutional-neural-network-cml-cloud-set-up
    runs-on: [self-hosted, cml-runner]
    environment: test
    # container:
    #   image: docker://iterativeai/cml:0-dvc2-base1-gpu
    container:
      image: docker://iterativeai/cml:0-dvc2-base1
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.1
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: machine-learning/convolutional-neural-network/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: machine-learning/convolutional-neural-network/pyproject.toml
      - name: Install dependencies
        working-directory: convolutional-neural-network
        run: |
          uv sync --dev
      - name: Pull Data
        working-directory: convolutional-neural-network
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          uv run poe dvc-pull
      - name: Train model
        working-directory: convolutional-neural-network
        shell: bash -l {0}
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          uv run poe dvc-repro
      - name: Write CML report
        working-directory: convolutional-neural-network
        shell: bash -l {0}
        env:
          REPO_TOKEN: ${{ secrets.CML_ACCESS_TOKEN }}
        run: |
          echo "# CML (Cloud) Report" >> report.md
          echo "## Params" >> report.md
          cat output/reports/params.txt >> report.md
          cml comment create report.md
