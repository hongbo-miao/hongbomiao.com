---
name: . Lint

"on":
  workflow_call:

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    permissions:
      pull-requests: read
    outputs:
      lint-go: ${{ steps.filter.outputs.lint-go }}
      lint-javascript: ${{ steps.filter.outputs.lint-javascript }}
      lint-kubernetes-manifest: ${{ steps.filter.outputs.lint-kubernetes-manifest }}
      lint-protocol-buffers: ${{ steps.filter.outputs.lint-protocol-buffers }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            lint-go:
              - '.github/workflows/.lint.yml'
              - 'api-go/**'
            lint-javascript:
              - '.github/workflows/.lint.yml'
              - 'api-node/**'
              - 'ethereum/**'
              - 'grafana/hm-panel-plugin/**'
              - 'mobile-react-native/**'
              - 'web/**'
              - 'web-cypress/**'
            lint-kubernetes-manifest:
              - '.github/workflows/.lint.yml'
              - 'kubernetes/manifests/**'
            lint-protocol-buffers:
              - '.github/workflows/.lint.yml'
              - 'api-go/**'

  lint-c-cpp:
    name: C, C++
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Lint C, C++
        uses: DoozyX/clang-format-lint-action@v0.15
        with:
          source: .
          extensions: c,cpp,h,ino
          clangFormatVersion: 14
          style: file

  lint-cmake:
    name: CMake
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: poetry
          cache-dependency-path: poetry.lock
      - name: Set Poetry environment
        run: |
          poetry env use 3.11
      - name: Install dependencies
        run: |
          poetry install --no-root
      - name: Lint CMake
        run: |
          poetry run poe lint-cmake

  lint-commit-message:
    name: Commit Message
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Lint Commit
        uses: wagoid/commitlint-github-action@v5

  lint-css:
    name: CSS
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: |
          npm ci
      - name: Lint CSS
        run: |
          npm run lint:css

  lint-dockerfile:
    name: Dockerfile
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Lint Dockerfile
        uses: jbergstroem/hadolint-gh-action@v1
        with:
          dockerfile: '**/Dockerfile*'

  lint-go:
    name: Go
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.lint-go == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: api-go/go.mod
          cache-dependency-path: api-go/go.sum
      - name: Lint Go
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: api-go
          args: --timeout=3m

  lint-javascript:
    name: JavaScript
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.lint-javascript == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: |
            api-node/package-lock.json
            ethereum/package-lock.json
            grafana/hm-panel-plugin/package-lock.json
            mobile-react-native/package-lock.json
            web/package-lock.json
            web-cypress/package-lock.json
      - name: Install dependencies
        run: |
          cd api-node && npm ci
          cd ../ethereum && npm ci
          cd ../grafana/hm-panel-plugin && npm ci
          cd ../../mobile-react-native && npm ci
          cd ../web && npm ci
          cd ../web-cypress && npm ci
      - name: Lint JavaScript
        run: |
          cd api-node && npm run lint:javascript
          cd ../ethereum && npm run lint:javascript
          cd ../grafana/hm-panel-plugin && npm run lint:javascript
          cd ../../mobile-react-native && npm run lint:javascript
          cd ../web && npm run lint:javascript
          cd ../web-cypress && npm run lint:javascript

  lint-kotlin:
    name: Kotlin
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: '19'
          cache: gradle
      - name: Lint Kotlin
        run: |
          cd mobile-android && ./gradlew ktlintCheck

  lint-kubernetes-manifest:
    name: Kubernetes Manifest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.lint-kubernetes-manifest == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Lint Kubernetes
        run: |
          docker run \
            --rm \
            --volume="$(pwd)/kubernetes:/kubernetes" \
            ghcr.io/yannh/kubeconform:latest-alpine \
              -kubernetes-version=1.26.0 \
              -ignore-filename-pattern='.*trafficsplit.yaml' \
              -ignore-filename-pattern='.*my-values.yaml' \
              -ignore-filename-pattern=kubernetes/manifests/argocd/ \
              -ignore-filename-pattern=kubernetes/manifests/elastic/ \
              -ignore-filename-pattern=kubernetes/manifests/hm-kafka/ \
              -ignore-filename-pattern=kubernetes/manifests/prometheus/ \
              -ignore-filename-pattern=kubernetes/manifests/yugabyte/ \
              kubernetes/manifests/

  lint-markdown:
    name: Markdown
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: |
          npm ci
      - name: Lint Markdown
        run: |
          npm run lint:markdown

  lint-protocol-buffers:
    name: Protocol Buffers
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.lint-protocol-buffers == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Lint Protocol Buffers
        run: |
          cd api-go && docker run --rm --volume="$(pwd):/workspace" --workdir=/workspace bufbuild/buf lint

  lint-python:
    name: Python
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: poetry
          cache-dependency-path: poetry.lock
      - name: Set Poetry environment
        run: |
          poetry env use 3.11
      - name: Install dependencies
        run: |
          poetry install --no-root
      - name: Lint Python (Black)
        run: |
          poetry run poe lint-python-black
      - name: Lint Python (Ruff)
        run: |
          poetry run poe lint-python-ruff
      - name: Lint Python (isort)
        run: |
          poetry run poe lint-python-isort

  lint-qml:
    name: QML
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.*'
          cache: true
      - name: Lint QML
        run: |
          qmllint $(git ls-files "*.qml")

  lint-ruby:
    name: Ruby
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Lint Ruby
        run: |
          bundle exec rubocop

  lint-shell:
    name: Shell
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Lint Shell
        run: |
          shellcheck $(git ls-files '*.sh')

  lint-solidity:
    name: Solidity
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: |
          npm ci
      - name: Lint Solidity
        run: |
          npm run lint:solidity

  lint-sql:
    name: SQL
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: poetry
          cache-dependency-path: poetry.lock
      - name: Set Poetry environment
        run: |
          poetry env use 3.11
      - name: Install dependencies
        run: |
          poetry install --no-root
      - name: Lint SQL
        run: |
          # poetry run poe lint-sql -- --dialect=bigquery bigquery-ml
          # poetry run poe lint-sql-fix -- --dialect=clickhouse clickhouse/cpu_metrics
          poetry run poe lint-sql -- --dialect=postgres hasura-graphql-engine/migrations
          poetry run poe lint-sql -- --dialect=postgres hasura-graphql-engine/seeds
          poetry run poe lint-sql -- --dialect=postgres kubernetes/data/postgres/opa_db/migrations
          poetry run poe lint-sql -- --dialect=postgres streaming/migrations
          poetry run poe lint-sql -- --dialect=postgres timescaledb/migrations
          poetry run poe lint-sql -- --dialect=sparksql hm-spark/applications/find-taxi-top-routes-sql/src/queries

  lint-terraform:
    name: Terraform
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Lint Terraform
        run: |
          terraform fmt -recursive -check

  lint-xml:
    name: XML
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: |
          npm ci
      - name: Lint XML
        run: |
          npm run lint:xml

  lint-yaml:
    name: YAML
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: poetry
          cache-dependency-path: poetry.lock
      - name: Set Poetry environment
        run: |
          poetry env use 3.11
      - name: Install dependencies
        run: |
          poetry install --no-root
      - name: Lint YAML
        run: |
          poetry run poe lint-yaml
