---
name: . Lint

'on':
  workflow_call:

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    permissions:
      pull-requests: read
    outputs:
      # Languages
      ansible: ${{ steps.filter.outputs.ansible }}
      c-cpp: ${{ steps.filter.outputs.c-cpp }}
      cmake: ${{ steps.filter.outputs.cmake }}
      css: ${{ steps.filter.outputs.css }}
      dockerfile: ${{ steps.filter.outputs.dockerfile }}
      markdown: ${{ steps.filter.outputs.markdown }}
      matlab: ${{ steps.filter.outputs.matlab }}
      python: ${{ steps.filter.outputs.python }}
      qml: ${{ steps.filter.outputs.qml }}
      ruby: ${{ steps.filter.outputs.ruby }}
      shell: ${{ steps.filter.outputs.shell }}
      solidity: ${{ steps.filter.outputs.solidity }}
      sql: ${{ steps.filter.outputs.sql }}
      terraform: ${{ steps.filter.outputs.terraform }}
      vhdl: ${{ steps.filter.outputs.vhdl }}
      xml: ${{ steps.filter.outputs.xml }}
      yaml: ${{ steps.filter.outputs.yaml }}
      # Applications
      api-go: ${{ steps.filter.outputs.api-go }}
      api-node: ${{ steps.filter.outputs.api-node }}
      api-rust: ${{ steps.filter.outputs.api-rust }}
      ethereum: ${{ steps.filter.outputs.ethereum }}
      grafana-hm-panel-plugin: ${{ steps.filter.outputs.grafana-hm-panel-plugin }}
      hm-spark-find-retired-people-scala: ${{ steps.filter.outputs.hm-spark-find-retired-people-scala }}
      hm-spark-ingest-from-s3-to-kafka: ${{ steps.filter.outputs.hm-spark-ingest-from-s3-to-kafka }}
      iads-iads-data-producer: ${{ steps.filter.outputs.iads-iads-data-producer }}
      iads-zeromq-iads-bridge: ${{ steps.filter.outputs.iads-zeromq-iads-bridge }}
      mobile-android: ${{ steps.filter.outputs.mobile-android }}
      mobile-react-native: ${{ steps.filter.outputs.mobile-react-native }}
      national-instruments-veristand-zeromq-bridge: ${{ steps.filter.outputs.national-instruments-veristand-zeromq-bridge }}
      kafka-rust-proto-consumer: ${{ steps.filter.outputs.kafka-rust-proto-consumer }}
      kafka-rust-proto-producer: ${{ steps.filter.outputs.kafka-rust-proto-producer }}
      kafka-rust-udp-kafka-bridge: ${{ steps.filter.outputs.kafka-rust-udp-kafka-bridge }}
      kafka-rust-zeromq-kafka-bridge: ${{ steps.filter.outputs.kafka-rust-zeromq-kafka-bridge }}
      kubernetes: ${{ steps.filter.outputs.kubernetes }}
      udp-receiver: ${{ steps.filter.outputs.udp-receiver }}
      udp-sender: ${{ steps.filter.outputs.udp-sender }}
      web: ${{ steps.filter.outputs.web }}
      web-cypress: ${{ steps.filter.outputs.web-cypress }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - uses: dorny/paths-filter@v3.0.2
        id: filter
        with:
          filters: |
            # Languages
            ansible:
              - '.github/workflows/.lint.yml'
              - 'pyproject.toml'
              - 'uv.lock'
              - '**/playbook.yml'
            c-cpp:
              - '.github/workflows/.lint.yml'
              - '.clang-format'
              - '**/*.c'
              - '**/*.cpp'
              - '**/*.cu'
              - '**/*.h'
              - '**/*.ino'
            cmake:
              - '.github/workflows/.lint.yml'
              - 'pyproject.toml'
              - 'uv.lock'
              - '**/CMakeLists.txt'
            css:
              - '.github/workflows/.lint.yml'
              - '.npmrc'
              - 'package.json'
              - 'package-lock.json'
              - 'stylelint.config.mjs'
              - '.stylelintignore'
              - '**/*.css'
            dockerfile:
              - '.github/workflows/.lint.yml'
              - '.hadolint.yaml'
              - '**/Dockerfile*'
            markdown:
              - '.github/workflows/.lint.yml'
              - '.npmrc'
              - 'package.json'
              - 'package-lock.json'
              - '**/*.md'
            matlab:
              - '.github/workflows/.lint.yml'
              - 'pyproject.toml'
              - 'uv.lock'
              - '**/*.m'
            ruby:
              - '.github/workflows/.lint.yml'
              - 'Gemfile'
              - 'Gemfile.lock'
              # https://github.com/rubocop/rubocop/blob/master/config/default.yml
              - '**/*.gemfile'
              - '**/Vagrantfile'
            python:
              - '.github/workflows/.lint.yml'
              - 'pyproject.toml'
              - 'uv.lock'
              - '**/*.py'
            qml:
              - '.github/workflows/.lint.yml'
              - '**/*.qml'
            shell:
              - '.github/workflows/.lint.yml'
              - '**/*.sh'
            solidity:
              - '.github/workflows/.lint.yml'
              - '.npmrc'
              - 'package.json'
              - 'package-lock.json'
              - '.solhint.json'
              - '.solhintignore'
              - '**/*.sol'
            sql:
              - '.github/workflows/.lint.yml'
              - 'pyproject.toml'
              - 'uv.lock'
              - '.sqlfluff'
              - '.sqlfluffignore'
              - '**/*.sql'
            terraform:
              - '.github/workflows/.lint.yml'
              - '**/*.tf'
              - '**/*.tfvars'
              - '**/.terraform.lock.hcl'
            vhdl:
              - '.github/workflows/.lint.yml'
              - 'pyproject.toml'
              - 'uv.lock'
              - '**/*.vhd'
            xml:
              - '.github/workflows/.lint.yml'
              - '.npmrc'
              - 'package.json'
              - 'package-lock.json'
              - 'prettier.config.mjs'
              - '.prettierignore'
              - '**/*.xml'
            yaml:
              - '.github/workflows/.lint.yml'
              - 'pyproject.toml'
              - 'uv.lock'
              - '.yamllint.yaml'
              - '**/*.yaml'
            # Applications
            api-go:
              - '.github/workflows/.lint.yml'
              - 'api-go/**'
            api-node:
              - '.github/workflows/.lint.yml'
              - 'api-node/**'
            api-rust:
              - '.github/workflows/.lint.yml'
              - 'api-rust/**'
            ethereum:
              - '.github/workflows/.lint.yml'
              - 'ethereum/**'
            grafana-hm-panel-plugin:
              - '.github/workflows/.lint.yml'
              - 'data-visualization/grafana/hm-panel-plugin/**'
            hm-spark-find-retired-people-scala:
              - '.github/workflows/.lint.yml'
              - 'data-processing/hm-spark/applications/find-retired-people-scala/**'
            hm-spark-ingest-from-s3-to-kafka:
              - '.github/workflows/.lint.yml'
              - 'data-processing/hm-spark/applications/ingest-from-s3-to-kafka/**'
            iads-iads-data-producer:
              - '.github/workflows/.lint.yml'
              - 'data-visualization/iads/iads-data-producer/**'
            iads-zeromq-iads-bridge:
              - '.github/workflows/.lint.yml'
              - 'data-visualization/iads/zeromq-iads-bridge/**'
            kafka-rust-proto-consumer:
              - '.github/workflows/.lint.yml'
              - 'hm-kafka/kafka-client/kafka-rust/proto-consumer/**'
            kafka-rust-proto-producer:
              - '.github/workflows/.lint.yml'
              - 'hm-kafka/kafka-client/kafka-rust/proto-producer/**'
            kafka-rust-udp-kafka-bridge:
              - '.github/workflows/.lint.yml'
              - 'hm-kafka/kafka-client/kafka-rust/udp-kafka-bridge/**'
            kafka-rust-zeromq-kafka-bridge:
              - '.github/workflows/.lint.yml'
              - 'hm-kafka/kafka-client/kafka-rust/zeromq-kafka-bridge/**'
            kubernetes:
              - '.github/workflows/.lint.yml'
              - 'kubernetes/manifests/**'
            mobile-android:
              - '.github/workflows/.lint.yml'
              - 'mobile/mobile-android/**'
            mobile-react-native:
              - '.github/workflows/.lint.yml'
              - 'mobile/mobile-react-native/**'
            national-instruments-veristand-zeromq-bridge:
              - '.github/workflows/.lint.yml'
              - 'hardware-in-the-loop/national-instruments/veristand/VeriStandZeroMQBridge/**'
            udp-receiver:
              - '.github/workflows/.lint.yml'
              - 'network-programmability/udp/udp-receiver/**'
            udp-sender:
              - '.github/workflows/.lint.yml'
              - 'network-programmability/udp/udp-sender/**'
            web:
              - '.github/workflows/.lint.yml'
              - 'web/**'
            web-cypress:
              - '.github/workflows/.lint.yml'
              - 'web-cypress/**'

  lint-ansible:
    name: Ansible
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.ansible == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v4.2.0
        with:
          version: 0.5.2
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: pyproject.toml
      - name: Install dependencies
        run: uv sync --dev
      - name: Install dependencies from Ansible Galaxy
        run: |
          uv run poe ansible-galaxy-install --role-file=ansible/requirements.yml
      - name: Lint Ansible
        run: |
          uv run poe lint-ansible

  lint-csharp-national-instruments-veristand-zeromq-bridge:
    name: C# (national-instruments-veristand-zeromq-bridge)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.national-instruments-veristand-zeromq-bridge == 'true' }}
    runs-on: windows-2022
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up NuGet
        uses: nuget/setup-nuget@v2.0.1
        with:
          # https://www.nuget.org/packages/NuGet.Versioning#versions-body-tab
          nuget-version: 6.12.1
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4.1.0
        with:
          global-json-file: hardware-in-the-loop/national-instruments/veristand/VeriStandZeroMQBridge/global.json
      - name: Install dependencies
        working-directory: hardware-in-the-loop/national-instruments/veristand/VeriStandZeroMQBridge
        run: |
          nuget restore VeriStandZeroMQBridge.sln
          dotnet tool restore
      - name: Lint C# (format)
        working-directory: hardware-in-the-loop/national-instruments/veristand/VeriStandZeroMQBridge
        run: |
          dotnet format VeriStandZeroMQBridge.sln --verify-no-changes
      - name: Lint C# (CSharpier)
        working-directory: hardware-in-the-loop/national-instruments/veristand/VeriStandZeroMQBridge
        run: |
          dotnet csharpier --check .

  lint-c-cpp:
    name: C, C++
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.c-cpp == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Lint C, C++
        uses: DoozyX/clang-format-lint-action@v0.18.2
        with:
          source: .
          extensions: c,cpp,cu,h,ino
          clangFormatVersion: 18
          style: file

  lint-cmake:
    name: CMake
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.cmake == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v4.2.0
        with:
          version: 0.5.2
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: pyproject.toml
      - name: Install dependencies
        run: |
          uv sync --dev
      - name: Lint CMake
        run: |
          uv run poe lint-cmake

  lint-commit-message:
    name: Commit Message
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Lint Commit
        uses: wagoid/commitlint-github-action@v6.1.2

  lint-css:
    name: CSS
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.css == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: |
          npm ci
      - name: Lint CSS
        run: |
          npm run lint:css

  lint-dockerfile:
    name: Dockerfile
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.dockerfile == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Lint Dockerfile
        uses: jbergstroem/hadolint-gh-action@v1.12.2
        with:
          dockerfile: '**/Dockerfile*'

  lint-go-api-go:
    name: Go (api-go)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api-go == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Go
        uses: actions/setup-go@v5.1.0
        with:
          go-version-file: api-go/go.mod
          cache-dependency-path: api-go/go.sum
      - name: Lint Go
        uses: golangci/golangci-lint-action@v6.1.1
        with:
          version: latest
          working-directory: api-go
          args: --timeout=10m

  lint-javascript-api-node:
    name: JavaScript (api-node)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api-node == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: api-node/.nvmrc
          cache: npm
          cache-dependency-path: api-node/package-lock.json
      - name: Install dependencies
        working-directory: api-node
        run: |
          npm ci
      - name: Lint JavaScript
        working-directory: api-node
        run: |
          npm run lint:javascript

  lint-javascript-ethereum:
    name: JavaScript (ethereum)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.ethereum == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: ethereum/.nvmrc
          cache: npm
          cache-dependency-path: ethereum/package-lock.json
      - name: Install dependencies
        working-directory: ethereum
        run: |
          npm ci
      - name: Lint JavaScript
        working-directory: ethereum
        run: |
          npm run lint:javascript

  lint-javascript-grafana-hm-panel-plugin:
    name: JavaScript (grafana-hm-panel-plugin)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.grafana-hm-panel-plugin == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: data-visualization/grafana/hm-panel-plugin/.nvmrc
          cache: npm
          cache-dependency-path: data-visualization/grafana/hm-panel-plugin/package-lock.json
      - name: Install dependencies
        working-directory: data-visualization/grafana/hm-panel-plugin
        run: |
          npm ci
      - name: Lint JavaScript
        working-directory: data-visualization/grafana/hm-panel-plugin
        run: |
          npm run lint:javascript

  lint-javascript-mobile-react-native:
    name: JavaScript (mobile-react-native)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.mobile-react-native == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: mobile/mobile-react-native/.nvmrc
          cache: npm
          cache-dependency-path: mobile/mobile-react-native/package-lock.json
      - name: Install dependencies
        working-directory: mobile/mobile-react-native
        run: |
          npm ci
      - name: Lint JavaScript
        working-directory: mobile/mobile-react-native
        run: |
          npm run lint:javascript

  lint-javascript-web:
    name: JavaScript (web)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.web == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: web/.nvmrc
          cache: npm
          cache-dependency-path: web/package-lock.json
      - name: Install dependencies
        working-directory: web
        run: |
          npm ci
      - name: Lint JavaScript
        working-directory: web
        run: |
          npm run lint:javascript

  lint-javascript-web-cypress:
    name: JavaScript (web-cypress)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.web-cypress == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: web-cypress/.nvmrc
          cache: npm
          cache-dependency-path: web-cypress/package-lock.json
      - name: Install dependencies
        working-directory: web-cypress
        run: |
          npm ci
      - name: Lint JavaScript
        working-directory: web-cypress
        run: |
          npm run lint:javascript

  lint-kotlin-mobile-android:
    name: Kotlin (mobile-android)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.mobile-android == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Java
        uses: actions/setup-java@v4.5.0
        with:
          distribution: corretto
          java-version: '17'
          cache: gradle
      - name: Lint Kotlin
        working-directory: mobile/mobile-android
        run: |
          ./gradlew ktlintCheck

  lint-kubernetes-manifest:
    name: Kubernetes Manifest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.kubernetes == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Lint Kubernetes
        run: |
          docker run \
            --rm \
            --volume="$(pwd)/kubernetes:/kubernetes" \
            ghcr.io/yannh/kubeconform:latest-alpine \
              -kubernetes-version=1.26.0 \
              -ignore-filename-pattern='.*trafficsplit.yaml' \
              -ignore-filename-pattern='.*my-values.yaml' \
              -ignore-filename-pattern=kubernetes/manifests/argocd/ \
              -ignore-filename-pattern=kubernetes/manifests/elastic/ \
              -ignore-filename-pattern=kubernetes/manifests/hm-kafka/ \
              -ignore-filename-pattern=kubernetes/manifests/kubeflow/kubeflow-training-operator/ \
              -ignore-filename-pattern=kubernetes/manifests/postgres-operator/ \
              -ignore-filename-pattern=kubernetes/manifests/prometheus/ \
              -ignore-filename-pattern=kubernetes/manifests/yugabyte/ \
              kubernetes/manifests/

  lint-markdown:
    name: Markdown
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.markdown == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: |
          npm ci
      - name: Lint Markdown
        run: |
          npm run lint:markdown

  lint-matlab:
    name: MATLAB
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matlab == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v4.2.0
        with:
          version: 0.5.2
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: pyproject.toml
      - name: Install dependencies
        run: |
          uv sync --dev
      - name: Lint MATLAB
        run: |
          uv run poe lint-matlab

  lint-protocol-buffers-api-go:
    name: Protocol Buffers (api-go)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api-go == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Lint Protocol Buffers
        working-directory: api-go
        run: |
          docker run \
            --rm \
            --volume="$(pwd):/workspace" \
            --workdir=/workspace \
            bufbuild/buf \
            lint

  lint-python:
    name: Python
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.python == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v4.2.0
        with:
          version: 0.5.2
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: pyproject.toml
      - name: Install dependencies
        run: |
          uv sync --dev
      - name: Lint Python (Black)
        run: |
          uv run poe lint-python-black
      - name: Lint Python (Ruff)
        run: |
          uv run poe lint-python-ruff
      - name: Lint Python (isort)
        run: |
          uv run poe lint-python-isort

  lint-qml:
    name: QML
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.qml == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Qt
        uses: jurplel/install-qt-action@v4.1.1
        with:
          version: 6.6.1
          cache: true
      - name: Lint QML
        run: |
          qmllint $(git ls-files "**/*.qml")

  lint-ruby:
    name: Ruby
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.ruby == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Lint Ruby
        run: |
          bundle exec rubocop

  lint-rust-api-rust:
    name: Rust (api-rust)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.iads-api-rust == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
      - name: Install dependencies
        working-directory: api-rust
        run: |
          cargo build
      - name: Lint Rust (rustfmt)
        working-directory: api-rust
        run: |
          cargo fmt --all
      - name: Lint Rust (Clippy)
        working-directory: api-rust
        run: |
          cargo clippy

  lint-rust-iads-data-producer:
    name: Rust (iads-data-producer)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.iads-iads-data-producer == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
      - name: Install dependencies
        working-directory: data-visualization/iads/iads-data-producer
        run: |
          cargo build
      - name: Lint Rust (rustfmt)
        working-directory: data-visualization/iads/iads-data-producer
        run: |
          cargo fmt --all
      - name: Lint Rust (Clippy)
        working-directory: data-visualization/iads/iads-data-producer
        run: |
          cargo clippy

  lint-rust-zeromq-iads-bridge:
    name: Rust (zeromq-iads-bridge)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.iads-zeromq-iads-bridge == 'true' }}
    runs-on: windows-2022
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      # protoc is for prost
      - name: Install protoc
        uses: arduino/setup-protoc@v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 28.3
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
      - name: Install dependencies
        working-directory: data-visualization/iads/zeromq-iads-bridge
        run: |
          cargo build
      - name: Lint Rust (rustfmt)
        working-directory: data-visualization/iads/zeromq-iads-bridge
        run: |
          cargo fmt --all
      - name: Lint Rust (Clippy)
        working-directory: data-visualization/iads/zeromq-iads-bridge
        run: |
          cargo clippy

  lint-rust-kafka-rust-proto-consumer:
    name: Rust (kafka-rust-proto-consumer)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.kafka-rust-proto-consumer == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      # librdkafka is for rdkafka
      - name: Install librdkafka
        run: |
          # https://github.com/confluentinc/librdkafka#build-from-source
          wget --no-verbose --output-document=librdkafka.tar.gz https://github.com/edenhill/librdkafka/archive/refs/tags/v2.6.0.tar.gz
          tar -x -f librdkafka.tar.gz
          rm -f librdkafka.tar.gz
          cd librdkafka-2.6.0
          ./configure
          make
          sudo make install
          sudo ldconfig
          cd ..
          rm -r -f librdkafka-2.6.0/
      # protoc is for prost
      - name: Install protoc
        uses: arduino/setup-protoc@v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 28.3
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
      - name: Install dependencies
        working-directory: hm-kafka/kafka-client/kafka-rust/proto-consumer
        run: |
          cargo build
      - name: Lint Rust (rustfmt)
        working-directory: hm-kafka/kafka-client/kafka-rust/proto-consumer
        run: |
          cargo fmt --all
      - name: Lint Rust (Clippy)
        working-directory: hm-kafka/kafka-client/kafka-rust/proto-consumer
        run: |
          cargo clippy

  lint-rust-kafka-rust-proto-producer:
    name: Rust (kafka-rust-proto-producer)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.kafka-rust-proto-producer == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      # librdkafka is for rdkafka
      - name: Install librdkafka
        run: |
          # https://github.com/confluentinc/librdkafka#build-from-source
          wget --no-verbose --output-document=librdkafka.tar.gz https://github.com/edenhill/librdkafka/archive/refs/tags/v2.6.0.tar.gz
          tar -x -f librdkafka.tar.gz
          rm -f librdkafka.tar.gz
          cd librdkafka-2.6.0
          ./configure
          make
          sudo make install
          sudo ldconfig
          cd ..
          rm -r -f librdkafka-2.6.0/
      # protoc is for prost
      - name: Install protoc
        uses: arduino/setup-protoc@v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 28.3
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
      - name: Install dependencies
        working-directory: hm-kafka/kafka-client/kafka-rust/proto-producer
        run: |
          cargo build
      - name: Lint Rust (rustfmt)
        working-directory: hm-kafka/kafka-client/kafka-rust/proto-producer
        run: |
          cargo fmt --all
      - name: Lint Rust (Clippy)
        working-directory: hm-kafka/kafka-client/kafka-rust/proto-producer
        run: |
          cargo clippy

  lint-rust-kafka-rust-udp-kafka-bridge:
    name: Rust (kafka-rust-udp-kafka-bridge)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.kafka-rust-udp-kafka-bridge == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      # librdkafka is for rdkafka
      - name: Install librdkafka
        run: |
          # https://github.com/confluentinc/librdkafka#build-from-source
          wget --no-verbose --output-document=librdkafka.tar.gz https://github.com/edenhill/librdkafka/archive/refs/tags/v2.6.0.tar.gz
          tar -x -f librdkafka.tar.gz
          rm -f librdkafka.tar.gz
          cd librdkafka-2.6.0
          ./configure
          make
          sudo make install
          sudo ldconfig
          cd ..
          rm -r -f librdkafka-2.6.0/
      # protoc is for prost
      - name: Install protoc
        uses: arduino/setup-protoc@v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 28.3
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
      - name: Install dependencies
        working-directory: hm-kafka/kafka-client/kafka-rust/udp-kafka-bridge
        run: |
          cargo build
      - name: Lint Rust (rustfmt)
        working-directory: hm-kafka/kafka-client/kafka-rust/udp-kafka-bridge
        run: |
          cargo fmt --all
      - name: Lint Rust (Clippy)
        working-directory: hm-kafka/kafka-client/kafka-rust/udp-kafka-bridge
        run: |
          cargo clippy

  lint-rust-kafka-rust-zeromq-kafka-bridge:
    name: Rust (kafka-rust-zeromq-kafka-bridge)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.kafka-rust-zeromq-kafka-bridge == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      # librdkafka is for rdkafka
      - name: Install librdkafka
        run: |
          # https://github.com/confluentinc/librdkafka#build-from-source
          wget --no-verbose --output-document=librdkafka.tar.gz https://github.com/edenhill/librdkafka/archive/refs/tags/v2.6.0.tar.gz
          tar -x -f librdkafka.tar.gz
          rm -f librdkafka.tar.gz
          cd librdkafka-2.6.0
          ./configure
          make
          sudo make install
          sudo ldconfig
          cd ..
          rm -r -f librdkafka-2.6.0/
      # protoc is for prost
      - name: Install protoc
        uses: arduino/setup-protoc@v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 28.3
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
      - name: Install dependencies
        working-directory: hm-kafka/kafka-client/kafka-rust/zeromq-kafka-bridge
        run: |
          cargo build
      - name: Lint Rust (rustfmt)
        working-directory: hm-kafka/kafka-client/kafka-rust/zeromq-kafka-bridge
        run: |
          cargo fmt --all
      - name: Lint Rust (Clippy)
        working-directory: hm-kafka/kafka-client/kafka-rust/zeromq-kafka-bridge
        run: |
          cargo clippy

  lint-rust-udp-receiver:
    name: Rust (udp-receiver)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.udp-receiver == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      # protoc is for prost
      - name: Install protoc
        uses: arduino/setup-protoc@v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 28.3
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
      - name: Install dependencies
        working-directory: network-programmability/udp/udp-receiver
        run: |
          cargo build
      - name: Lint Rust (rustfmt)
        working-directory: network-programmability/udp/udp-receiver
        run: |
          cargo fmt --all
      - name: Lint Rust (Clippy)
        working-directory: network-programmability/udp/udp-receiver
        run: |
          cargo clippy

  lint-rust-udp-sender:
    name: Rust (udp-sender)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.udp-sender == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      # protoc is for prost
      - name: Install protoc
        uses: arduino/setup-protoc@v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 28.3
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
      - name: Install dependencies
        working-directory: network-programmability/udp/udp-sender
        run: |
          cargo build
      - name: Lint Rust (rustfmt)
        working-directory: network-programmability/udp/udp-sender
        run: |
          cargo fmt --all
      - name: Lint Rust (Clippy)
        working-directory: network-programmability/udp/udp-sender
        run: |
          cargo clippy

  lint-scala-hm-spark-find-retired-people-scala:
    name: Scala (hm-spark-find-retired-people-scala)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-spark-find-retired-people-scala == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Java
        uses: actions/setup-java@v4.5.0
        with:
          distribution: corretto
          java-version: '17'
          cache: sbt
      - name: Set up sbt
        uses: sbt/setup-sbt@v1.1.4
      - name: Lint Scala (Scalafmt)
        working-directory: data-processing/hm-spark/applications/find-retired-people-scala
        run: |
          sbt scalafmtCheckAll
      - name: Lint Scala (Scalafix)
        working-directory: data-processing/hm-spark/applications/find-retired-people-scala
        run: |
          sbt "scalafixAll --check"

  lint-scala-hm-spark-ingest-from-s3-to-kafka:
    name: Scala (hm-spark-ingest-from-s3-to-kafka)
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-spark-ingest-from-s3-to-kafka == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Java
        uses: actions/setup-java@v4.5.0
        with:
          distribution: corretto
          java-version: '17'
          cache: sbt
      - name: Set up sbt
        uses: sbt/setup-sbt@v1.1.4
      - name: Lint Scala (Scalafmt)
        working-directory: data-processing/hm-spark/applications/ingest-from-s3-to-kafka
        run: |
          sbt scalafmtCheckAll
      - name: Lint Scala (Scalafix)
        working-directory: data-processing/hm-spark/applications/ingest-from-s3-to-kafka
        run: |
          sbt "scalafixAll --check"

  lint-shell:
    name: Shell
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.shell == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Lint Shell
        run: |
          shellcheck $(git ls-files '**/*.sh')

  lint-solidity:
    name: Solidity
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.solidity == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: |
          npm ci
      - name: Lint Solidity
        run: |
          npm run lint:solidity

  lint-sql:
    name: SQL
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.sql == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v4.2.0
        with:
          version: 0.5.2
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: pyproject.toml
      - name: Install dependencies
        run: |
          uv sync --dev
      - name: Lint SQL
        run: |
          # uv run poe lint-sql --dialect=athena cloud-platform/aws/amazon-athena/queries
          # uv run poe lint-sql --dialect=bigquery cloud-platform/google-cloud/bigquery/bigquery-ml
          # uv run poe lint-sql --dialect=clickhouse data-storage/clickhouse/cpu_metrics
          uv run poe lint-sql --dialect=postgres hasura-graphql-engine/migrations
          uv run poe lint-sql --dialect=postgres hasura-graphql-engine/seeds
          uv run poe lint-sql --dialect=postgres kubernetes/data/postgres/opa_db/migrations
          uv run poe lint-sql --dialect=postgres data-ingestion/airbyte/sources/postgres/production-iot
          uv run poe lint-sql --dialect=postgres data-processing/flink/applications/stream-tweets/migrations
          uv run poe lint-sql --dialect=postgres data-storage/timescaledb/dummy_iot/migrations
          uv run poe lint-sql --dialect=postgres data-storage/timescaledb/motor/migrations
          # uv run poe lint-sql --dialect=postgres ops/argo-cd/applications/production-hm/airbyte/sql
          # uv run poe lint-sql --dialect=snowflake data-storage/snowflake/queries
          uv run poe lint-sql --dialect=sparksql data-storage/delta-lake/queries
          uv run poe lint-sql --dialect=sqlite data-storage/sqlite/queries
          # uv run poe lint-sql --dialect=trino trino/queries
          # uv run poe lint-sql --dialect=tsql data-storage/microsoft-sql-server/queries

  lint-terraform:
    name: Terraform
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.terraform == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Lint Terraform
        run: |
          terraform fmt -recursive -check

  lint-vhdl:
    name: VHDL
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.vhdl == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v4.2.0
        with:
          version: 0.5.2
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: pyproject.toml
      - name: Install dependencies
        run: |
          uv sync --dev
      - name: Lint VHDL
        run: |
          uv run poe lint-vhdl

  lint-xml:
    name: XML
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.xml == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: |
          npm ci
      - name: Lint XML
        run: |
          npm run lint:xml

  lint-yaml:
    name: YAML
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.yaml == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v4.2.0
        with:
          version: 0.5.2
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version-file: pyproject.toml
      - name: Install dependencies
        run: |
          uv sync --dev
      - name: Lint YAML
        run: |
          uv run poe lint-yaml
