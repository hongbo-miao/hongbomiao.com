---
name: Test

'on':
  pull_request:
    branches: [main]
  schedule:
    - cron: 0 10 * * *

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    permissions:
      pull-requests: read
    outputs:
      amazon-sagemaker-pytorch-mnist: ${{ steps.filter.outputs.amazon-sagemaker-pytorch-mnist }}
      api-go: ${{ steps.filter.outputs.api-go }}
      api-node: ${{ steps.filter.outputs.api-node }}
      api-python: ${{ steps.filter.outputs.api-python }}
      convolutional-neural-network: ${{ steps.filter.outputs.convolutional-neural-network }}
      data-distribution-service: ${{ steps.filter.outputs.data-distribution-service }}
      dbt-hm-postgres: ${{ steps.filter.outputs.dbt-hm-postgres }}
      delta-lake-read-delta-lake-by-amazon-athena: ${{ steps.filter.outputs.delta-lake-read-delta-lake-by-amazon-athena }}
      delta-lake-read-delta-lake-by-trino: ${{ steps.filter.outputs.delta-lake-read-delta-lake-by-trino }}
      delta-lake-write-to-delta-lake: ${{ steps.filter.outputs.delta-lake-write-to-delta-lake }}
      feature-store: ${{ steps.filter.outputs.feature-store }}
      grafana-hm-panel-plugin: ${{ steps.filter.outputs.grafana-hm-panel-plugin }}
      graph-neural-network: ${{ steps.filter.outputs.graph-neural-network }}
      hm-airflow: ${{ steps.filter.outputs.hm-airflow }}
      hm-geopandas: ${{ steps.filter.outputs.hm-geopandas }}
      national-instruments-hm-ni-veristand: ${{ steps.filter.outputs.national-instruments-hm-ni-veristand }}
      national-instruments-hm-pyvisa: ${{ steps.filter.outputs.national-instruments-hm-pyvisa }}
      national-instruments-hm-tdms: ${{ steps.filter.outputs.national-instruments-hm-tdms }}
      hm-opal-client: ${{ steps.filter.outputs.hm-opal-client }}
      hm-prefect-calculate: ${{ steps.filter.outputs.hm-prefect-calculate }}
      hm-prefect-greet: ${{ steps.filter.outputs.hm-prefect-greet }}
      hm-prefect-ingest-data: ${{ steps.filter.outputs.hm-prefect-ingest-data }}
      hm-prefect-print-platform: ${{ steps.filter.outputs.hm-prefect-print-platform }}
      hm-pyvista-mount-saint-helens: ${{ steps.filter.outputs.hm-pyvista-mount-saint-helens }}
      hm-rasa: ${{ steps.filter.outputs.hm-rasa }}
      hm-spark-find-retired-people-scala: ${{ steps.filter.outputs.hm-spark-find-retired-people-scala }}
      hm-spark-find-taxi-top-routes: ${{ steps.filter.outputs.hm-spark-find-taxi-top-routes }}
      hm-spark-find-taxi-top-routes-sql: ${{ steps.filter.outputs.hm-spark-find-taxi-top-routes-sql }}
      hm-spark-ingest-from-s3-to-kafka: ${{ steps.filter.outputs.hm-spark-ingest-from-s3-to-kafka }}
      hm-supervision-detect-objects: ${{ steps.filter.outputs.hm-supervision-detect-objects }}
      hm-xxhash: ${{ steps.filter.outputs.hm-xxhash }}
      hugging-face-analyze-sentiment: ${{ steps.filter.outputs.hugging-face-analyze-sentiment }}
      mobile-android: ${{ steps.filter.outputs.mobile-android }}
      mobile-ios: ${{ steps.filter.outputs.mobile-ios }}
      mobile-react-native: ${{ steps.filter.outputs.mobile-react-native }}
      neural-forecasting-forecast-air-passenger-number: ${{ steps.filter.outputs.neural-forecasting-forecast-air-passenger-number }}
      prometheus: ${{ steps.filter.outputs.prometheus }}
      robot-operating-system: ${{ steps.filter.outputs.robot-operating-system }}
      reinforcement-learning-cart-pole: ${{ steps.filter.outputs.reinforcement-learning-cart-pole }}
      streaming: ${{ steps.filter.outputs.streaming }}
      web: ${{ steps.filter.outputs.web }}
      web-cypress: ${{ steps.filter.outputs.web-cypress }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            amazon-sagemaker-pytorch-mnist:
              - '.github/workflows/test.yml'
              - 'aws/amazon-sagemaker/pytorch-mnist/**'
            api-go:
              - '.github/workflows/test.yml'
              - 'api-go/**'
            api-node:
              - '.github/workflows/test.yml'
              - 'api-node/**'
            api-python:
              - '.github/workflows/test.yml'
              - 'api-python/**'
            convolutional-neural-network:
              - '.github/workflows/test.yml'
              - 'convolutional-neural-network/**'
            data-distribution-service:
              - '.github/workflows/test.yml'
              - 'data-distribution-service/**'
            dbt-hm-postgres:
              - '.github/workflows/test.yml'
              - 'dbt/dbt_hm_postgres/**'
            delta-lake-read-delta-lake-by-amazon-athena:
              - '.github/workflows/test.yml'
              - 'delta-lake/read-delta-lake-by-amazon-athena/**'
            delta-lake-read-delta-lake-by-trino:
              - '.github/workflows/test.yml'
              - 'delta-lake/read-delta-lake-by-trino/**'
            delta-lake-write-to-delta-lake:
              - '.github/workflows/test.yml'
              - 'delta-lake/write-to-delta-lake/**'
            feature-store:
              - '.github/workflows/test.yml'
              - 'feature-store/**'
            grafana-hm-panel-plugin:
              - '.github/workflows/test.yml'
              - 'grafana/hm-panel-plugin/**'
            graph-neural-network:
              - '.github/workflows/test.yml'
              - 'graph-neural-network/**'
            hm-airflow:
              - '.github/workflows/test.yml'
              - 'hm-airflow/**'
            hm-geopandas:
              - '.github/workflows/test.yml'
              - 'hm-geopandas/**'
            national-instruments-hm-ni-veristand:
              - '.github/workflows/test.yml'
              - 'national-instruments/hm-ni-veristand/**'
            national-instruments-hm-pyvisa:
              - '.github/workflows/test.yml'
              - 'national-instruments/hm-pyvisa/**'
            national-instruments-hm-tdms:
              - '.github/workflows/test.yml'
              - 'national-instruments/hm-tdms/**'
            hm-opal-client:
              - '.github/workflows/test.yml'
              - 'hm-opal-client/**'
            hm-prefect-calculate:
              - '.github/workflows/test.yml'
              - 'hm-prefect/workflows/calculate/**'
            hm-prefect-greet:
              - '.github/workflows/test.yml'
              - 'hm-prefect/workflows/greet/**'
            hm-prefect-ingest-data:
              - '.github/workflows/test.yml'
              - 'hm-prefect/workflows/ingest-data/**'
            hm-prefect-print-platform:
              - '.github/workflows/test.yml'
              - 'hm-prefect/workflows/print-platform/**'
            hm-pyvista-mount-saint-helens:
              - '.github/workflows/test.yml'
              - 'hm-pyvista/mount-saint-helens/**'
            hm-rasa:
              - '.github/workflows/test.yml'
              - 'hm-rasa/**'
            hm-spark-find-retired-people-scala:
              - '.github/workflows/test.yml'
              - 'hm-spark/applications/find-retired-people-scala/**'
            hm-spark-find-taxi-top-routes:
              - '.github/workflows/test.yml'
              - 'hm-spark/applications/find-taxi-top-routes/**'
            hm-spark-find-taxi-top-routes-sql:
              - '.github/workflows/test.yml'
              - 'hm-spark/applications/find-taxi-top-routes-sql/**'
            hm-spark-ingest-from-s3-to-kafka:
              - '.github/workflows/test.yml'
              - 'hm-spark/applications/ingest-from-s3-to-kafka/**'
            hm-supervision-detect-objects:
              - '.github/workflows/test.yml'
              - 'hm-supervision/detect-objects/**'
            hm-xxhash:
              - '.github/workflows/test.yml'
              - 'hm-xxhash/**'
            hugging-face-analyze-sentiment:
              - '.github/workflows/test.yml'
              - 'hugging-face/analyze-sentiment/**'
            mobile-android:
              - '.github/workflows/test.yml'
              - 'mobile-android/**'
            mobile-ios:
              - '.github/workflows/test.yml'
              - 'mobile-ios/**'
            mobile-react-native:
              - '.github/workflows/test.yml'
              - 'mobile-react-native/**'
            neural-forecasting-forecast-air-passenger-number:
              - '.github/workflows/test.yml'
              - 'neural-forecasting/forecast-air-passenger-number/**'
            prometheus:
              - '.github/workflows/test.yml'
              - 'prometheus/**'
            reinforcement-learning-cart-pole:
              - '.github/workflows/test.yml'
              - 'reinforcement-learning/cart-pole/**'
            robot-operating-system:
              - '.github/workflows/test.yml'
              - 'robot-operating-system/**'
            streaming:
              - '.github/workflows/test.yml'
              - 'streaming/**'
            web:
              - '.github/workflows/test.yml'
              - 'web/**'
            web-cypress:
              - '.github/workflows/test.yml'
              - 'web-cypress/**'

  lint:
    name: Lint
    uses: ./.github/workflows/.lint.yml

  static-type-check:
    name: Static Type Check
    uses: ./.github/workflows/.static-type-check.yml

  web-test:
    name: Web | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.web == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: web/.nvmrc
          cache: npm
          cache-dependency-path: web/package-lock.json
      - name: Install dependencies
        working-directory: web
        run: |
          npm ci
      - name: Test
        working-directory: web
        run: |
          npm run test:coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: web

  web-end-to-end-test:
    name: Web | End-to-End Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api-node == 'true' || needs.detect-changes.outputs.web == 'true' || needs.detect-changes.outputs.web-cypress == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: web-cypress/.nvmrc
          cache: npm
          cache-dependency-path: web-cypress/package-lock.json
      - name: Install dependencies
        working-directory: web-cypress
        run: |
          npm ci
      - name: Pull Docker images
        working-directory: api-node
        run: |
          docker-compose --file=docker-compose.cypress.yaml pull
      - name: Cache Docker images
        uses: jpribyl/action-docker-layer-caching@v0.1.1
        continue-on-error: true
      - name: Start Docker
        working-directory: api-node
        run: |
          docker-compose --file=docker-compose.cypress.yaml up --detach
      - name: Cypress
        working-directory: web-cypress
        run: |
          npm run test:cypress:headless:5000
      - name: Stop Docker
        working-directory: api-node
        run: |
          docker-compose --file=docker-compose.cypress.yaml down

  web-lighthouse:
    name: Web | Lighthouse
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.web == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: web/.nvmrc
          cache: npm
          cache-dependency-path: web/package-lock.json
      - name: Install dependencies
        working-directory: web
        run: |
          npm ci
      - name: Build
        working-directory: web
        run: |
          npm run build
      - name: Lighthouse
        working-directory: web
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          npm run lighthouse

  # https://www.chromatic.com/docs/github-actions
  web-visual-test:
    name: Web | Visual Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.web == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Required to retrieve git history
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: web/.nvmrc
          cache: npm
          cache-dependency-path: web/package-lock.json
      - name: Install dependencies
        working-directory: web
        run: |
          npm ci
      - name: Build
        working-directory: web
        run: |
          npm run build
          npm run storybook:build
      - name: Publish storybook to Chromatic
        working-directory: web
        run: |
          npm run storybook:publish -- --project-token=${{ secrets.CHROMATIC_PROJECT_TOKEN }} --exit-zero-on-changes

  mobile-ios-test:
    name: Mobile - iOS | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.mobile-ios == 'true' }}
    runs-on: macos-13
    environment: test
    timeout-minutes: 90
    env:
      # To use a Gemfile which is not at the root
      # https://github.com/ruby/setup-ruby#caching-bundle-install-automatically
      BUNDLE_GEMFILE: ${{ github.workspace }}/mobile-ios/Gemfile
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.2'
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          working-directory: mobile-ios
          bundler-cache: true
      - name: Build
        working-directory: mobile-ios
        run: |
          xcodebuild build-for-testing \
            -project HMMobile.xcodeproj \
            -scheme HMMobile \
            -destination "platform=iOS Simulator,name=iPhone 14 Pro,OS=16.2"
      - name: Test
        uses: wandalen/wretry.action@v1
        with:
          current_path: mobile-ios
          command: |
            xcodebuild test-without-building \
              -project HMMobile.xcodeproj \
              -scheme HMMobile \
              -destination "platform=iOS Simulator,name=iPhone 14 Pro,OS=16.2"
          attempt_limit: 3
          attempt_delay: 2000
      - name: Convert coverage to Cobertura XML format
        working-directory: mobile-ios
        run: |
          bundle exec slather
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: mobile-ios

  mobile-android-lint:
    name: Mobile - Android | Lint
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.mobile-android == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '17'
          cache: gradle
      - name: Lint
        working-directory: mobile-android
        run: |
          ./gradlew lint

  mobile-android-test:
    name: Mobile - Android | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.mobile-android == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '17'
          cache: gradle
      - name: Test
        working-directory: mobile-android
        run: |
          ./gradlew test

  mobile-android-instrumented-test:
    name: Mobile - Android | Instrumented Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.mobile-android == 'true' }}
    runs-on: macos-13
    environment: test
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '17'
          cache: gradle
      - name: Instrumented Test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          working-directory: mobile-android
          api-level: 29
          script: ./gradlew connectedAndroidTest

  mobile-react-native-test:
    name: Mobile - React Native | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.mobile-react-native == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: mobile-react-native/.nvmrc
          cache: npm
          cache-dependency-path: mobile-react-native/package-lock.json
      - name: Install dependencies
        working-directory: mobile-react-native
        run: |
          npm ci
      - name: Test
        working-directory: mobile-react-native
        run: |
          npm run test:coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: mobile-react-native

  api-go-test:
    name: API - Go | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api-go == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: api-go/go.mod
          cache-dependency-path: api-go/go.sum
      - name: Test
        working-directory: api-go
        run: |
          go test ./... -race -coverprofile=coverage.txt -covermode=atomic
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: api-go

  api-node-test:
    name: API - Node.js | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api-node == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: api-node/.nvmrc
          cache: npm
          cache-dependency-path: api-node/package-lock.json
      - name: Install dependencies
        working-directory: api-node
        run: |
          npm ci
      - name: Test
        working-directory: api-node
        run: |
          npm run test:coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: api-node

  api-node-mutation-test:
    name: API - Node.js | Mutation Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api-node == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: api-node/.nvmrc
          cache: npm
          cache-dependency-path: api-node/package-lock.json
      - name: Install dependencies
        working-directory: api-node
        run: |
          npm ci
      - name: Stryker
        working-directory: api-node
        env:
          STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}
        run: |
          npm run test:stryker

  api-python-test:
    name: API - Python | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api-python == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # librdkafka is for confluent-kafka
      - name: Install librdkafka
        run: |
          # https://github.com/edenhill/librdkafka#build-from-source
          wget --no-verbose --output-document=librdkafka.tar.gz https://github.com/edenhill/librdkafka/archive/refs/tags/v1.9.2.tar.gz
          tar -x -f librdkafka.tar.gz
          rm -f librdkafka.tar.gz
          cd librdkafka-1.9.2
          ./configure
          make
          sudo make install
          sudo ldconfig
          cd ..
          rm -r -f librdkafka-1.9.2/
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: api-python/pyproject.toml
          cache: poetry
          cache-dependency-path: api-python/poetry.lock
      - name: Install dependencies
        working-directory: api-python
        run: |
          poetry install --no-root
      - name: Test
        working-directory: api-python
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: api-python

  airflow-test:
    name: Airflow | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-airflow == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hm-airflow/pyproject.toml
          cache: poetry
          cache-dependency-path: hm-airflow/poetry.lock
      - name: Install dependencies
        working-directory: hm-airflow
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hm-airflow
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hm-airflow

  amazon-sagemaker-pytorch-mnist-test:
    name: Amazon SageMaker (pytorch-mnist) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.amazon-sagemaker-pytorch-mnist == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: aws/amazon-sagemaker/pytorch-mnist/pyproject.toml
          cache: poetry
          cache-dependency-path: aws/amazon-sagemaker/pytorch-mnist/poetry.lock
      - name: Install dependencies
        working-directory: aws/amazon-sagemaker/pytorch-mnist
        run: |
          poetry install --no-root
      - name: Test
        working-directory: aws/amazon-sagemaker/pytorch-mnist
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: aws/amazon-sagemaker/pytorch-mnist

  data-distribution-service-test:
    name: Data Distribution Service | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.data-distribution-service == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: data-distribution-service/pyproject.toml
          cache: poetry
          cache-dependency-path: data-distribution-service/poetry.lock
      - name: Install dependencies
        working-directory: data-distribution-service
        run: |
          poetry install --no-root
      - name: Test
        working-directory: data-distribution-service
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: data-distribution-service

  dbt-hm-postgres-test:
    name: dbt (hm-postgres) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.dbt-hm-postgres == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: dbt/dbt_hm_postgres/pyproject.toml
          cache: poetry
          cache-dependency-path: dbt/dbt_hm_postgres/poetry.lock
      - name: Install dependencies
        working-directory: dbt/dbt_hm_postgres
        run: |
          poetry install --no-root
      - name: Test
        working-directory: dbt/dbt_hm_postgres
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: dbt/dbt_hm_postgres

  delta-lake-read-delta-lake-by-amazon-athena-test:
    name: Delta Lake (read-delta-lake-by-amazon-athena) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.delta-lake-read-delta-lake-by-amazon-athena == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: delta-lake/read-delta-lake-by-amazon-athena/pyproject.toml
          cache: poetry
          cache-dependency-path: delta-lake/read-delta-lake-by-amazon-athena/poetry.lock
      - name: Install dependencies
        working-directory: delta-lake/read-delta-lake-by-amazon-athena
        run: |
          poetry install --no-root
      - name: Test
        working-directory: delta-lake/read-delta-lake-by-amazon-athena
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: delta-lake/read-delta-lake-by-amazon-athena

  delta-lake-read-delta-lake-by-trino-test:
    name: Delta Lake (read-delta-lake-by-trino) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.delta-lake-read-delta-lake-by-trino == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: delta-lake/read-delta-lake-by-trino/pyproject.toml
          cache: poetry
          cache-dependency-path: delta-lake/read-delta-lake-by-trino/poetry.lock
      - name: Install dependencies
        working-directory: delta-lake/read-delta-lake-by-trino
        run: |
          poetry install --no-root
      - name: Test
        working-directory: delta-lake/read-delta-lake-by-trino
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: delta-lake/read-delta-lake-by-trino

  delta-lake-write-to-delta-lake-test:
    name: Delta Lake (write-to-delta-lake) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.delta-lake-write-to-delta-lake == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: delta-lake/write-to-delta-lake/pyproject.toml
          cache: poetry
          cache-dependency-path: delta-lake/write-to-delta-lake/poetry.lock
      - name: Install dependencies
        working-directory: delta-lake/write-to-delta-lake
        run: |
          poetry install --no-root
      - name: Test
        working-directory: delta-lake/write-to-delta-lake
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: delta-lake/write-to-delta-lake

  feature-store-test:
    name: Feature Store | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.feature-store == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: feature-store/pyproject.toml
          cache: poetry
          cache-dependency-path: feature-store/poetry.lock
      - name: Install dependencies
        working-directory: feature-store
        run: |
          poetry install --no-root
      - name: Test
        working-directory: feature-store
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: feature-store

  geopandas-test:
    name: GeoPandas | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-geopandas == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hm-geopandas/pyproject.toml
          cache: poetry
          cache-dependency-path: hm-geopandas/poetry.lock
      - name: Install dependencies
        working-directory: hm-geopandas
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hm-geopandas
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hm-geopandas

  hugging-face-analyze-sentiment-test:
    name: Hugging Face (analyze-sentiment) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hugging-face-analyze-sentiment == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hugging-face/analyze-sentiment/pyproject.toml
          cache: poetry
          cache-dependency-path: hugging-face/analyze-sentiment/poetry.lock
      - name: Install dependencies
        working-directory: hugging-face/analyze-sentiment
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hugging-face/analyze-sentiment
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hugging-face/analyze-sentiment

  neural-forecasting-forecast-air-passenger-number-test:
    name: Neural Forecasting (forecast-air-passenger-number) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.neural-forecasting-forecast-air-passenger-number == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: neural-forecasting/forecast-air-passenger-number/pyproject.toml
          cache: poetry
          cache-dependency-path: neural-forecasting/forecast-air-passenger-number/poetry.lock
      - name: Install dependencies
        working-directory: neural-forecasting/forecast-air-passenger-number
        run: |
          poetry install --no-root
      - name: Test
        working-directory: neural-forecasting/forecast-air-passenger-number
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: neural-forecasting/forecast-air-passenger-number

  national-instruments-hm-ni-veristand-test:
    name: National Instruments (ni-veristand) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.national-instruments-hm-ni-veristand == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: national-instruments/hm-ni-veristand/pyproject.toml
          cache: poetry
          cache-dependency-path: national-instruments/hm-ni-veristand/poetry.lock
      - name: Install dependencies
        working-directory: national-instruments/hm-ni-veristand
        run: |
          poetry install --no-root
      - name: Test
        working-directory: national-instruments/hm-ni-veristand
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: national-instruments/hm-ni-veristand

  national-instruments-hm-pyvisa-test:
    name: National Instruments (pyvisa) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.national-instruments-hm-pyvisa == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: national-instruments/hm-pyvisa/pyproject.toml
          cache: poetry
          cache-dependency-path: national-instruments/hm-pyvisa/poetry.lock
      - name: Install dependencies
        working-directory: national-instruments/hm-pyvisa
        run: |
          poetry install --no-root
      - name: Test
        working-directory: national-instruments/hm-pyvisa
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: national-instruments/hm-pyvisa

  national-instruments-hm-tdms-test:
    name: National Instruments (tdms) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.national-instruments-hm-tdms == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: national-instruments/hm-tdms/pyproject.toml
          cache: poetry
          cache-dependency-path: national-instruments/hm-tdms/poetry.lock
      - name: Install dependencies
        working-directory: national-instruments/hm-tdms
        run: |
          poetry install --no-root
      - name: Test
        working-directory: national-instruments/hm-tdms
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: national-instruments/hm-tdms

  prefect-calculate-test:
    name: Prefect (calculate) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-prefect-calculate == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hm-prefect/workflows/calculate/pyproject.toml
          cache: poetry
          cache-dependency-path: hm-prefect/workflows/calculate/poetry.lock
      - name: Install dependencies
        working-directory: hm-prefect/workflows/calculate
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hm-prefect/workflows/calculate
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hm-prefect/workflows/calculate

  prefect-greet-test:
    name: Prefect (greet) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-prefect-greet == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hm-prefect/workflows/greet/pyproject.toml
          cache: poetry
          cache-dependency-path: hm-prefect/workflows/greet/poetry.lock
      - name: Install dependencies
        working-directory: hm-prefect/workflows/greet
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hm-prefect/workflows/greet
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hm-prefect/workflows/greet

  prefect-ingest-data-test:
    name: Prefect (ingest-data) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-prefect-ingest-data == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hm-prefect/workflows/ingest-data/pyproject.toml
          cache: poetry
          cache-dependency-path: hm-prefect/workflows/ingest-data/poetry.lock
      - name: Install dependencies
        working-directory: hm-prefect/workflows/ingest-data
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hm-prefect/workflows/ingest-data
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hm-prefect/workflows/ingest-data

  prefect-print-platform-test:
    name: Prefect (print-platform) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-prefect-print-platform == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hm-prefect/workflows/print-platform/pyproject.toml
          cache: poetry
          cache-dependency-path: hm-prefect/workflows/print-platform/poetry.lock
      - name: Install dependencies
        working-directory: hm-prefect/workflows/print-platform
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hm-prefect/workflows/print-platform
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hm-prefect/workflows/print-platform

  pyvista-mount-saint-helens-test:
    name: PyVista (mount-saint-helens) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-pyvista-mount-saint-helens == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hm-pyvista/mount-saint-helens/pyproject.toml
          cache: poetry
          cache-dependency-path: hm-pyvista/mount-saint-helens/poetry.lock
      - name: Install dependencies
        working-directory: hm-pyvista/mount-saint-helens
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hm-pyvista/mount-saint-helens
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hm-pyvista/mount-saint-helens

  reinforcement-learning-cart-pole-test:
    name: Reinforcement Learning (cart-pole) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.reinforcement-learning-cart-pole == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: reinforcement-learning/cart-pole/pyproject.toml
          cache: poetry
          cache-dependency-path: reinforcement-learning/cart-pole/poetry.lock
      - name: Install dependencies
        working-directory: reinforcement-learning/cart-pole
        run: |
          poetry install --no-root
      - name: Test
        working-directory: reinforcement-learning/cart-pole
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: reinforcement-learning/cart-pole

  supervision-detect-objects-test:
    name: supervision (detect-objects) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-supervision-detect-objects == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hm-supervision/detect-objects/pyproject.toml
          cache: poetry
          cache-dependency-path: hm-supervision/detect-objects/poetry.lock
      - name: Install dependencies
        working-directory: hm-supervision/detect-objects
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hm-supervision/detect-objects
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hm-supervision/detect-objects

  xxhash-test:
    name: xxHash | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-xxhash == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hm-xxhash/pyproject.toml
          cache: poetry
          cache-dependency-path: hm-xxhash/poetry.lock
      - name: Install dependencies
        working-directory: hm-xxhash
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hm-xxhash
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hm-xxhash

  spark-find-retired-people-scala-test:
    name: Spark (find-retired-people-scala) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-spark-find-retired-people-scala == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '17'
          cache: sbt
      - name: Test
        working-directory: hm-spark/applications/find-retired-people-scala
        run: |
          sbt test

  spark-find-taxi-top-routes-test:
    name: Spark (find-taxi-top-routes) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-spark-find-taxi-top-routes == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hm-spark/applications/find-taxi-top-routes/pyproject.toml
          cache: poetry
          cache-dependency-path: hm-spark/applications/find-taxi-top-routes/poetry.lock
      - name: Install dependencies
        working-directory: hm-spark/applications/find-taxi-top-routes
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hm-spark/applications/find-taxi-top-routes
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hm-spark/applications/find-taxi-top-routes

  spark-find-taxi-top-routes-sql-test:
    name: Spark (find-taxi-top-routes-sql) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-spark-find-taxi-top-routes-sql == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: hm-spark/applications/find-taxi-top-routes-sql/pyproject.toml
          cache: poetry
          cache-dependency-path: hm-spark/applications/find-taxi-top-routes-sql/poetry.lock
      - name: Install dependencies
        working-directory: hm-spark/applications/find-taxi-top-routes-sql
        run: |
          poetry install --no-root
      - name: Test
        working-directory: hm-spark/applications/find-taxi-top-routes-sql
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: hm-spark/applications/find-taxi-top-routes-sql

  spark-ingest-from-s3-to-kafka-test:
    name: Spark (ingest-from-s3-to-kafka) | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-spark-ingest-from-s3-to-kafka == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '17'
          cache: sbt
      - name: Test
        working-directory: hm-spark/applications/ingest-from-s3-to-kafka
        run: |
          sbt test

  streaming-test:
    name: Streaming | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.streaming == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '11'
          cache: maven
      - name: Test
        working-directory: streaming
        run: |
          mvn test

  opa-test:
    name: OPA | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.api-go == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download OPA Binary
        run: |
          curl --silent --fail --show-error --location --output opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod 755 ./opa
      - name: Test
        run: |
          ./opa test api-go/internal/graphql_server/policies/*.rego -v

  ros-test:
    name: ROS | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.robot-operating-system == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 20
    container: ubuntu:jammy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup ROS
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble
      - name: Build and test
        uses: ros-tooling/action-ros-ci@v0.3
        with:
          package-name: turtle_robot
          target-ros2-distro: humble

  rasa-test:
    name: Rasa | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-rasa == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Train and test
        uses: RasaHQ/rasa-train-test-gha@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workspace: ${{ github.workspace }}/hm-rasa

  prometheus-test:
    name: Prometheus | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.prometheus == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Test
        run: |
          docker build --file=prometheus/Dockerfile.test .

  grafana-hm-panel-plugin-end-to-end-test:
    name: Grafana (hm-panel-plugin) | End-to-End Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.grafana-hm-panel-plugin == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: grafana/hm-panel-plugin/.nvmrc
          cache: npm
          cache-dependency-path: grafana/hm-panel-plugin/package-lock.json
      - name: Install dependencies
        working-directory: grafana/hm-panel-plugin
        run: |
          npm ci
      - name: Build
        working-directory: grafana/hm-panel-plugin
        run: |
          npm run build
      - name: Pull Docker images
        working-directory: grafana/hm-panel-plugin
        run: |
          docker-compose pull
      - name: Cache Docker images
        uses: jpribyl/action-docker-layer-caching@v0.1.1
        continue-on-error: true
      - name: Start Docker
        working-directory: grafana/hm-panel-plugin
        run: |
          docker-compose up --detach
      - name: Run e2e tests
        working-directory: grafana/hm-panel-plugin
        run: |
          npm run e2e
      - name: Stop Docker
        working-directory: grafana/hm-panel-plugin
        run: |
          docker-compose down

  grafana-hm-panel-plugin-compatibility-test:
    name: Grafana (hm-panel-plugin) | Compatibility Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.grafana-hm-panel-plugin == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: grafana/hm-panel-plugin/.nvmrc
          cache: npm
          cache-dependency-path: grafana/hm-panel-plugin/package-lock.json
      - name: Install dependencies
        working-directory: grafana/hm-panel-plugin
        run: |
          npm ci
      - name: Build
        working-directory: grafana/hm-panel-plugin
        run: |
          npm run build
      - name: Check compatibility
        working-directory: grafana/hm-panel-plugin
        run: |
          npx @grafana/levitate@latest is-compatible --path=src/module.ts --target=@grafana/data,@grafana/ui,@grafana/runtime

  hm-opal-client-build:
    name: HM OPAL Client | Build
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hm-opal-client == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./hm-opal-client/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max

  gnn-train:
    name: GNN | Train
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.graph-neural-network == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up CML
        uses: iterative/setup-cml@v1
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: graph-neural-network/pyproject.toml
          cache: poetry
          cache-dependency-path: graph-neural-network/poetry.lock
      - name: Install dependencies
        working-directory: graph-neural-network
        run: |
          poetry install --no-root
      - name: Train model
        working-directory: graph-neural-network
        env:
          WANDB_MODE: offline
        run: |
          poetry run poe dev -- --dataset=ogbg-molhiv --gnn=gcn --feature=simple --epochs=2

  cnn-test:
    name: CNN | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.convolutional-neural-network == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: convolutional-neural-network/pyproject.toml
          cache: poetry
          cache-dependency-path: convolutional-neural-network/poetry.lock
      - name: Install dependencies
        working-directory: convolutional-neural-network
        run: |
          poetry install --no-root
      - name: Test
        working-directory: convolutional-neural-network
        run: |
          poetry run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: convolutional-neural-network

  cnn-cml-local-train:
    name: CNN | CML (Local) - Train
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.convolutional-neural-network == 'true' }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up CML
        uses: iterative/setup-cml@v1
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: convolutional-neural-network/pyproject.toml
          cache: poetry
          cache-dependency-path: convolutional-neural-network/poetry.lock
      - name: Install dependencies
        working-directory: convolutional-neural-network
        run: |
          poetry install --no-root
      - name: Train model
        working-directory: convolutional-neural-network
        shell: bash -l {0}
        env:
          WANDB_MODE: offline
        run: |
          poetry run poe dev -- --should_download_original_data=True
      - name: Write CML report
        working-directory: convolutional-neural-network
        shell: bash -l {0}
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "# CML (Local) Report" >> report.md
          echo "## Params" >> report.md
          cat output/reports/params.txt >> report.md
          cml comment create report.md

  cnn-cml-cloud-set-up:
    name: CNN | CML (Cloud) - Set Up
    runs-on: ubuntu-22.04
    environment: test
    needs: detect-changes
    if: ${{ false }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up CML
        uses: iterative/setup-cml@v1
      - name: Set up cloud
        shell: bash
        env:
          REPO_TOKEN: ${{ secrets.CML_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cml-runner \
          --cloud=aws \
          --cloud-region=us-west-2 \
          --cloud-type=t2.small \
          --labels=cml-runner

  cnn-cml-cloud-train:
    name: CNN | CML (Cloud) - Train
    needs: cnn-cml-cloud-set-up
    runs-on: [self-hosted, cml-runner]
    environment: test
    # container: docker://iterativeai/cml:0-dvc2-base1-gpu
    container: docker://iterativeai/cml:0-dvc2-base1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: convolutional-neural-network/pyproject.toml
          cache: poetry
          cache-dependency-path: convolutional-neural-network/poetry.lock
      - name: Install dependencies
        working-directory: convolutional-neural-network
        run: |
          poetry install --no-root
      - name: Pull Data
        working-directory: convolutional-neural-network
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          poetry run poe dvc-pull
      - name: Train model
        working-directory: convolutional-neural-network
        shell: bash -l {0}
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          poetry run poe dvc-repro
      - name: Write CML report
        working-directory: convolutional-neural-network
        shell: bash -l {0}
        env:
          REPO_TOKEN: ${{ secrets.CML_ACCESS_TOKEN }}
        run: |
          echo "# CML (Cloud) Report" >> report.md
          echo "## Params" >> report.md
          cat output/reports/params.txt >> report.md
          cml comment create report.md

  code-review:
    name: Code Review
    if: ${{ false }}
    runs-on: ubuntu-22.04
    environment: test
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Code Review
        uses: anc95/ChatGPT-CodeReview@v1.0.11
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
